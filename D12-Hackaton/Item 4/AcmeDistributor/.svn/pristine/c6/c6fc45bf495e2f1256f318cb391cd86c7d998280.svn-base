package services;

import java.util.Collection;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import domain.Item;
import domain.Money;
import domain.ShoppingLine;
import domain.Stock;
import domain.Warehouse;

import repositories.ShoppingLineRepository;
import repositories.StockRepository;
import repositories.WarehouseRepository;


@Service
@Transactional
public class ShoppingLineService {
	@Autowired
	private ShoppingLineRepository shoppingLineRepository;
//	Supporting services ----------------------------------------
	@Autowired
	private WarehouseRepository warehouseRepository;
	@Autowired
	private StockRepository stockRepository;
//	Simple CRUD methods ----------------------------------------	
	public ShoppingLine create(){
		ShoppingLine result= new ShoppingLine();
		return result;
	}
	
	public ShoppingLine findOne(int shoppingLine){
		ShoppingLine result;
		result=shoppingLineRepository.findOne(shoppingLine);
		return result;
	}
	
	public Collection<ShoppingLine> findAll(){
		Collection<ShoppingLine> result;
		result=shoppingLineRepository.findAll();
		return result;
	}
	
	public void save(ShoppingLine shoppingLine){
		Assert.notNull(shoppingLine);
		shoppingLineRepository.save(shoppingLine);
	}
	
	public void delete(ShoppingLine shoppingLine){
		Assert.notNull(shoppingLine);
		shoppingLineRepository.delete(shoppingLine);
	}
	
//	Other business methods -------------------------------------
	
	public ShoppingLine findByShoppingLineId(int shoppingLineId){
		ShoppingLine result;
		result=shoppingLineRepository.findByShoppingLineId(shoppingLineId);
		return result;
	}
	
	public Collection<ShoppingLine> findShoppingLineByInvoice(int invoiceId){
		Collection<ShoppingLine> result;
		result=shoppingLineRepository.findShoppingLineByInvoice(invoiceId);
		return result;
	}
	
	public Collection<ShoppingLine> findShoppingLineByItem(int itemId){
		Collection<ShoppingLine> result;
		result=shoppingLineRepository.findShoppingLineByItem(itemId);
		return result;
	}
	
	//TODO falta por hacer, consultar con grupo dudas sobre comparacion
	public void compareStock(Collection<ShoppingLine> lines){
		
	}
	
	public void reduceStock(Collection<ShoppingLine> lines){
		//reducir el stock siempre del warehouse que mas cantidad
		//tenga para el item de la shoppingLine
		Item item = null;
		Warehouse warehouse = null;
		Stock stock = null;
		Integer stockFinal= 0;
		Integer quantity = 0;
		for(ShoppingLine sl: lines){
			quantity=sl.getQuantity();
			item=sl.getItem();
			warehouse=warehouseRepository.getMoreStockForGivenItem(item.getReference());
			stock=stockRepository.getStockFromWarehouseIdItemId(warehouse.getId(), item.getId());
			stockFinal = stock.getQuantity()- quantity;
			stock.setQuantity(stockFinal);
			stockRepository.save(stock);
		}
	}
	
	//TODO falta por hacer, consultar con grupo, idea: calcular la tax de 
	//la shoppingline completa teniendo en cuenta quantity de shoppingline
	//y totalPrice de entryRegister
	public Money getTotalLine(ShoppingLine sl){
		Money result=null;
		return result;
	}

	public Collection<ShoppingLine> findByShoppingCartId(int shoppingCartId) {
		Collection<ShoppingLine> result=shoppingLineRepository.findByShoppingCartId(shoppingCartId);
		return result;
	}
}
