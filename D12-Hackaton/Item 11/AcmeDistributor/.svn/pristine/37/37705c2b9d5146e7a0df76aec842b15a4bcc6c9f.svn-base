package services;

import java.util.ArrayList;
import java.util.Collection;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import repositories.DistributorRepository;
import security.Authority;
import security.UserAccount;
import domain.Distributor;
import domain.Folder;
import domain.Message;
import domain.Warehouse;

@Service
@Transactional
public class DistibutorService {
	@Autowired
	private DistributorRepository distributorRepository;
//	Supporting services ----------------------------------------

//	Simple CRUD methods ----------------------------------------
	public Distributor create(){
		Distributor result=new Distributor();
		
		//TODO Se puede hacer en el reconstruct
		UserAccount userAccount=new UserAccount();
		
		Authority authority=new Authority();
		authority.setAuthority(Authority.DISTRIBUTOR);
		Collection<Authority> authorities = new ArrayList<Authority>();
		authorities.add(authority);
		userAccount.setAuthorities(authorities);
		result.setUserAccount(userAccount);
		
		Collection<Warehouse> warehouses=new ArrayList<Warehouse>();

		Folder inbox=new Folder();
		Collection<Message> messagesI=new ArrayList<Message>();
		inbox.setMessages(messagesI);
		Folder outbox=new Folder();
		Collection<Message> messagesO=new ArrayList<Message>();
		inbox.setMessages(messagesO);
		
		
		result.setInbox(inbox);
		result.setOutbox(outbox);
		result.setWarehouses(warehouses);
		
		return result;
	}
	
	public Distributor findOne(int distributorId){
		Distributor result;
		result=distributorRepository.findOne(distributorId);
		return result;
	}
	
	public Collection<Distributor> findAll(){
		Collection<Distributor> result;
		result=distributorRepository.findAll();
		return result;
	}
	
	public void save(Distributor distributor){
		Assert.notNull(distributor);
		distributorRepository.save(distributor);
	}
	
	public void delete(Distributor distributor){
		Assert.notNull(distributor);
		distributorRepository.delete(distributor);
	}
	
//	Other business methods -------------------------------------
	
	public Distributor findByUserAccount(UserAccount userAccount){		
		Distributor result=distributorRepository.findByUserAccount(userAccount);
		return result;
	}
	
}
