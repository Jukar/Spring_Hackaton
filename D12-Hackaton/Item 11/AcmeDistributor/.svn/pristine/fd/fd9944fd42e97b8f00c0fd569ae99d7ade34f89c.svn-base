package services;

import java.util.Collection;
import java.util.Date;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import repositories.MessageRepository;
import security.LoginService;
import domain.Actor;
import domain.HistoryPrice;
import domain.Item;
import domain.Message;

@Service
@Transactional
public class MessageService {
//	Managed repository -----------------------------------------
	@Autowired
	private MessageRepository messageRepository;
//	Supporting services ----------------------------------------
	@Autowired
	private ActorService actorService;
//	Simple CRUD methods ----------------------------------------
	public Message create(){
		Message result=new Message();
		Actor sender=actorService.findByUserAccount(LoginService.getPrincipal());
		
		result.setFolder(sender.getOutbox());
		result.setSender(sender);
		result.setMoment(new Date());

		return result;
	}
	
	public Message findOne(int messageId){
		Message result;
		result=messageRepository.findOne(messageId);
		return result;
	}
	
	public Collection<Message> findAll(){
		Collection<Message> result;
		result=messageRepository.findAll();
		return result;
	}
	
	public void save(Message message){
		Assert.notNull(message);
		messageRepository.save(message);
	}
	
	public void delete(Message message){
		Assert.notNull(message);
		messageRepository.delete(message);
	}
	
// Other business methods -------------------------------------	
	public Collection<Message> getMessagesFromFolderId(int folderId){
		Collection<Message> result=messageRepository.getMessagesFromFolderId(folderId);
		return result;
	}

	public Collection<Message> getInboxFromActorId(int actorId){
		Collection<Message> result=messageRepository.getInboxFromActorId(actorId);
		return result;
	}

	public Collection<Message> getOutboxFromActorId(int actorId){
		Collection<Message> result=messageRepository.getOutboxFromActorId(actorId);
		return result;
	}
	
	public Collection<Message> getInboxFromCurrentActor(){
		Actor actor=actorService.findByUserAccount(LoginService.getPrincipal());
		Collection<Message> result=messageRepository.getInboxFromActorId(actor.getId());
		return result;
	}

	public Collection<Message> getOutboxFromCurrentActor(){
		Actor actor=actorService.findByUserAccount(LoginService.getPrincipal());
		Collection<Message> result=messageRepository.getOutboxFromActorId(actor.getId());
		return result;
	}
}
