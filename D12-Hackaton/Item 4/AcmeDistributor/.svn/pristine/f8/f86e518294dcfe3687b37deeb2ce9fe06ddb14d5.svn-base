package domain;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.Collection;

import org.hibernate.validator.constraints.NotBlank;

@Entity
@Access(AccessType.PROPERTY)
public class Item extends DomainEntity{
//Attributes --------------------------------------------------------------
	private String reference;
	private String name;
	private String category;
	private Money sellingPrice;
//Getters&Setters ---------------------------------------------------------
	@NotBlank
	public String getReference() {
		return reference;
	}
	public void setReference(String reference) {
		this.reference = reference;
	}
	
	@NotBlank
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	
	@NotBlank
	public String getCategory() {
		return category;
	}
	public void setCategory(String category) {
		this.category = category;
	}
	
	@NotNull
	@Valid
	public Money getSellingPrice() {
		return sellingPrice;
	}
	public void setSellingPrice(Money sellingPrice) {
		this.sellingPrice = sellingPrice;
	}
//Relationships------------------------------------------------------------
	private Collection<HistoryPrice> history;
	private Collection<Comment> comments;
	private Producer producer;
	

	@OneToMany(cascade = CascadeType.ALL,mappedBy="item")
	public Collection<HistoryPrice> getHistory() {
		return history;
	}
	public void setHistory(Collection<HistoryPrice> history) {
		this.history = history;
	}
	@OneToMany(cascade = CascadeType.ALL,mappedBy="itemSource")
	public Collection<Comment> getComments() {
		return comments;
	}
	public void setComments(Collection<Comment> comments) {
		this.comments = comments;
	}
	
	@ManyToOne(optional = false)
	public Producer getProducer() {
		return producer;
	}
	public void setProducer(Producer producer) {
		this.producer = producer;
	}
}
